//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input Settings/Player Movement.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Movement"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""11ec9e95-886d-4991-9b6e-a1b5869f3458"",
            ""actions"": [
                {
                    ""name"": ""MoveGhost"",
                    ""type"": ""Value"",
                    ""id"": ""bc280d89-aca9-418e-b4dd-c8f41c3d4be3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FloatUp"",
                    ""type"": ""Button"",
                    ""id"": ""f57b5956-ed16-45e3-98d9-e1b01951e28b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""dc14bb0d-55ce-46d2-8462-47ae68431b9b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Posses"",
                    ""type"": ""Button"",
                    ""id"": ""82d44896-3d5e-4c32-b3b3-349a56f60b8f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FloatDown"",
                    ""type"": ""Button"",
                    ""id"": ""3e9ddbba-56fa-493a-bc41-de91a51a6701"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shooting"",
                    ""type"": ""Button"",
                    ""id"": ""76484d85-1923-4c7f-8ee5-5deb9060e9df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aiming"",
                    ""type"": ""Button"",
                    ""id"": ""1968eec0-3e8c-48fc-b1b4-531027d573a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""35024de2-ff78-44a6-b4a9-4db2b017ec5d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cc7f7248-484e-4d09-9b27-3216d5ebcc6d"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FloatUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85bc8a67-2612-40a2-82a7-aaf98be84004"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FloatUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""07037e50-779a-4771-8bca-9b5db4fc9f98"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveGhost"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c7e4d41b-64cf-4bd8-beec-c730451b6d78"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveGhost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""04f1f5ae-2d09-4d29-82de-9d2fe5afaf9d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveGhost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""415e189d-9240-44ad-a386-bb68951ee25d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveGhost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""948f5d4e-e30b-4b11-b86d-aba9e8733293"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveGhost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5f3197b2-c27b-47cc-8924-e5b5029edd73"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveGhost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""957ba000-1036-4145-8e3a-ad8b371507a0"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveGhost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""20dd4d54-00bf-4583-9642-fbe4b0d72040"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveGhost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3809a728-7e61-427d-93d8-7eb10ce74b38"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveGhost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""80d24e5b-650f-41bf-98f2-789924fb2a16"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""686ff1ca-53a2-4dc2-bf33-82015ccfc146"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ff515ee0-9820-4172-8c55-da4a9d02d2e3"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Posses"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13413bde-0358-4a5b-84c6-23a5a5ee4076"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": ""Hold(duration=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Posses"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42892ae0-2f18-4603-8708-2f62d11eb7f6"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FloatDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d6fa197-b9c6-4daf-905c-00b0ec742f78"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FloatDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a0cac6a-ed30-4ec2-9923-21c4028c9cc1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shooting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6caf5ddf-bc63-4ac9-a05f-d74870c3035c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ef24c15-30e3-4eea-872e-e8437ee11e94"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Vehicle"",
            ""id"": ""8c78c08d-3c48-46e9-89a1-790631454c2a"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""91bf12c4-3503-4c54-9f4e-1e9e19b36bb2"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Raise/Lower"",
                    ""type"": ""Value"",
                    ""id"": ""2dddb83c-27db-4c80-8d1b-b92052d8110a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pick/Drop"",
                    ""type"": ""Button"",
                    ""id"": ""13196caf-ab89-4c71-ac85-58da90d03ed2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateClockwise"",
                    ""type"": ""Button"",
                    ""id"": ""77aedfb4-3719-493e-9396-85ca00e87581"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateAntiClockwise"",
                    ""type"": ""Button"",
                    ""id"": ""5250ea5b-d1ae-4145-8f2c-d31ff644a484"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""609c817d-ac1b-4d4a-aff9-7e91962420dd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""47029c8e-4b53-42f3-8cdf-9a77165088cb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""04718b2d-b02a-4cd0-b0d3-c992f1817d4f"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""03659535-378d-4ddb-baa0-81a60ccc877a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""cd7b8f39-df7b-47d5-88d0-cb00a7151173"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""22f16acd-792f-4800-bcec-3bd03edbbc59"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""f637e12b-4cea-4b7e-b281-c6e1049c9f55"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""e72658c8-19bf-4f78-8301-2cf574b2f396"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""336f4a81-d308-4e50-8077-c186c8cffccd"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""7b2f5656-965c-4007-b541-7fbdf51b2ac4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Raise/Lower"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a47d7d77-ee7d-47d8-a410-56e0bd66a86d"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Raise/Lower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""942426d3-b8b8-4c10-bf60-d49cc5c5ef0a"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Raise/Lower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""96a6c00b-f162-4358-83e6-7f8f734a8f1a"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pick/Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f7f758ca-f568-4078-aa8b-a874bda01469"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateClockwise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97c1b15f-4177-44d1-a23c-f3f95ba743fe"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateAntiClockwise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Airborne Vehicles"",
            ""id"": ""cb61172c-f009-4ebd-a4d0-bd9f0338fe99"",
            ""actions"": [
                {
                    ""name"": ""Rotate Clockwise"",
                    ""type"": ""Button"",
                    ""id"": ""cce2447c-25cc-4257-98b3-1c91f2689f47"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate AntiClockwise"",
                    ""type"": ""Button"",
                    ""id"": ""d8128ce6-ff89-40dd-bbd1-cffe83d31cbf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""73fdd397-cb7e-47a1-b6d4-d8fa038d9f07"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""6a3abf6d-b0a9-44a4-acaa-5e0e1403be2b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""e491c5fa-5ce1-40da-9115-ace79cc713d2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1fb5ba11-8cf3-4b84-829b-a6fa33ac2590"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Clockwise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c2620677-a9f3-4b72-9013-0c1a109a40bf"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate AntiClockwise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cccc9815-7ceb-461a-8376-7655ad85233a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85327416-9b9a-44d9-9e3e-32977443c9b2"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""e7e93fa1-fb3d-49bb-8bc8-822c05971379"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""03893bf7-480d-42a7-a47a-0c680675e7b4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""bfe4f23d-1dcb-47a6-9a97-176c97dc84cd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c1a88076-88cc-40c5-af87-303221b5ad78"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bb0166c4-004e-48ba-acdc-7d9f23b63dae"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_MoveGhost = m_Player.FindAction("MoveGhost", throwIfNotFound: true);
        m_Player_FloatUp = m_Player.FindAction("FloatUp", throwIfNotFound: true);
        m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
        m_Player_Posses = m_Player.FindAction("Posses", throwIfNotFound: true);
        m_Player_FloatDown = m_Player.FindAction("FloatDown", throwIfNotFound: true);
        m_Player_Shooting = m_Player.FindAction("Shooting", throwIfNotFound: true);
        m_Player_Aiming = m_Player.FindAction("Aiming", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        // Vehicle
        m_Vehicle = asset.FindActionMap("Vehicle", throwIfNotFound: true);
        m_Vehicle_Movement = m_Vehicle.FindAction("Movement", throwIfNotFound: true);
        m_Vehicle_RaiseLower = m_Vehicle.FindAction("Raise/Lower", throwIfNotFound: true);
        m_Vehicle_PickDrop = m_Vehicle.FindAction("Pick/Drop", throwIfNotFound: true);
        m_Vehicle_RotateClockwise = m_Vehicle.FindAction("RotateClockwise", throwIfNotFound: true);
        m_Vehicle_RotateAntiClockwise = m_Vehicle.FindAction("RotateAntiClockwise", throwIfNotFound: true);
        // Airborne Vehicles
        m_AirborneVehicles = asset.FindActionMap("Airborne Vehicles", throwIfNotFound: true);
        m_AirborneVehicles_RotateClockwise = m_AirborneVehicles.FindAction("Rotate Clockwise", throwIfNotFound: true);
        m_AirborneVehicles_RotateAntiClockwise = m_AirborneVehicles.FindAction("Rotate AntiClockwise", throwIfNotFound: true);
        m_AirborneVehicles_Up = m_AirborneVehicles.FindAction("Up", throwIfNotFound: true);
        m_AirborneVehicles_Down = m_AirborneVehicles.FindAction("Down", throwIfNotFound: true);
        m_AirborneVehicles_Movement = m_AirborneVehicles.FindAction("Movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_MoveGhost;
    private readonly InputAction m_Player_FloatUp;
    private readonly InputAction m_Player_Look;
    private readonly InputAction m_Player_Posses;
    private readonly InputAction m_Player_FloatDown;
    private readonly InputAction m_Player_Shooting;
    private readonly InputAction m_Player_Aiming;
    private readonly InputAction m_Player_Jump;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveGhost => m_Wrapper.m_Player_MoveGhost;
        public InputAction @FloatUp => m_Wrapper.m_Player_FloatUp;
        public InputAction @Look => m_Wrapper.m_Player_Look;
        public InputAction @Posses => m_Wrapper.m_Player_Posses;
        public InputAction @FloatDown => m_Wrapper.m_Player_FloatDown;
        public InputAction @Shooting => m_Wrapper.m_Player_Shooting;
        public InputAction @Aiming => m_Wrapper.m_Player_Aiming;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @MoveGhost.started += instance.OnMoveGhost;
            @MoveGhost.performed += instance.OnMoveGhost;
            @MoveGhost.canceled += instance.OnMoveGhost;
            @FloatUp.started += instance.OnFloatUp;
            @FloatUp.performed += instance.OnFloatUp;
            @FloatUp.canceled += instance.OnFloatUp;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Posses.started += instance.OnPosses;
            @Posses.performed += instance.OnPosses;
            @Posses.canceled += instance.OnPosses;
            @FloatDown.started += instance.OnFloatDown;
            @FloatDown.performed += instance.OnFloatDown;
            @FloatDown.canceled += instance.OnFloatDown;
            @Shooting.started += instance.OnShooting;
            @Shooting.performed += instance.OnShooting;
            @Shooting.canceled += instance.OnShooting;
            @Aiming.started += instance.OnAiming;
            @Aiming.performed += instance.OnAiming;
            @Aiming.canceled += instance.OnAiming;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @MoveGhost.started -= instance.OnMoveGhost;
            @MoveGhost.performed -= instance.OnMoveGhost;
            @MoveGhost.canceled -= instance.OnMoveGhost;
            @FloatUp.started -= instance.OnFloatUp;
            @FloatUp.performed -= instance.OnFloatUp;
            @FloatUp.canceled -= instance.OnFloatUp;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Posses.started -= instance.OnPosses;
            @Posses.performed -= instance.OnPosses;
            @Posses.canceled -= instance.OnPosses;
            @FloatDown.started -= instance.OnFloatDown;
            @FloatDown.performed -= instance.OnFloatDown;
            @FloatDown.canceled -= instance.OnFloatDown;
            @Shooting.started -= instance.OnShooting;
            @Shooting.performed -= instance.OnShooting;
            @Shooting.canceled -= instance.OnShooting;
            @Aiming.started -= instance.OnAiming;
            @Aiming.performed -= instance.OnAiming;
            @Aiming.canceled -= instance.OnAiming;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Vehicle
    private readonly InputActionMap m_Vehicle;
    private List<IVehicleActions> m_VehicleActionsCallbackInterfaces = new List<IVehicleActions>();
    private readonly InputAction m_Vehicle_Movement;
    private readonly InputAction m_Vehicle_RaiseLower;
    private readonly InputAction m_Vehicle_PickDrop;
    private readonly InputAction m_Vehicle_RotateClockwise;
    private readonly InputAction m_Vehicle_RotateAntiClockwise;
    public struct VehicleActions
    {
        private @PlayerInputActions m_Wrapper;
        public VehicleActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Vehicle_Movement;
        public InputAction @RaiseLower => m_Wrapper.m_Vehicle_RaiseLower;
        public InputAction @PickDrop => m_Wrapper.m_Vehicle_PickDrop;
        public InputAction @RotateClockwise => m_Wrapper.m_Vehicle_RotateClockwise;
        public InputAction @RotateAntiClockwise => m_Wrapper.m_Vehicle_RotateAntiClockwise;
        public InputActionMap Get() { return m_Wrapper.m_Vehicle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VehicleActions set) { return set.Get(); }
        public void AddCallbacks(IVehicleActions instance)
        {
            if (instance == null || m_Wrapper.m_VehicleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VehicleActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @RaiseLower.started += instance.OnRaiseLower;
            @RaiseLower.performed += instance.OnRaiseLower;
            @RaiseLower.canceled += instance.OnRaiseLower;
            @PickDrop.started += instance.OnPickDrop;
            @PickDrop.performed += instance.OnPickDrop;
            @PickDrop.canceled += instance.OnPickDrop;
            @RotateClockwise.started += instance.OnRotateClockwise;
            @RotateClockwise.performed += instance.OnRotateClockwise;
            @RotateClockwise.canceled += instance.OnRotateClockwise;
            @RotateAntiClockwise.started += instance.OnRotateAntiClockwise;
            @RotateAntiClockwise.performed += instance.OnRotateAntiClockwise;
            @RotateAntiClockwise.canceled += instance.OnRotateAntiClockwise;
        }

        private void UnregisterCallbacks(IVehicleActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @RaiseLower.started -= instance.OnRaiseLower;
            @RaiseLower.performed -= instance.OnRaiseLower;
            @RaiseLower.canceled -= instance.OnRaiseLower;
            @PickDrop.started -= instance.OnPickDrop;
            @PickDrop.performed -= instance.OnPickDrop;
            @PickDrop.canceled -= instance.OnPickDrop;
            @RotateClockwise.started -= instance.OnRotateClockwise;
            @RotateClockwise.performed -= instance.OnRotateClockwise;
            @RotateClockwise.canceled -= instance.OnRotateClockwise;
            @RotateAntiClockwise.started -= instance.OnRotateAntiClockwise;
            @RotateAntiClockwise.performed -= instance.OnRotateAntiClockwise;
            @RotateAntiClockwise.canceled -= instance.OnRotateAntiClockwise;
        }

        public void RemoveCallbacks(IVehicleActions instance)
        {
            if (m_Wrapper.m_VehicleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IVehicleActions instance)
        {
            foreach (var item in m_Wrapper.m_VehicleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VehicleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public VehicleActions @Vehicle => new VehicleActions(this);

    // Airborne Vehicles
    private readonly InputActionMap m_AirborneVehicles;
    private List<IAirborneVehiclesActions> m_AirborneVehiclesActionsCallbackInterfaces = new List<IAirborneVehiclesActions>();
    private readonly InputAction m_AirborneVehicles_RotateClockwise;
    private readonly InputAction m_AirborneVehicles_RotateAntiClockwise;
    private readonly InputAction m_AirborneVehicles_Up;
    private readonly InputAction m_AirborneVehicles_Down;
    private readonly InputAction m_AirborneVehicles_Movement;
    public struct AirborneVehiclesActions
    {
        private @PlayerInputActions m_Wrapper;
        public AirborneVehiclesActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotateClockwise => m_Wrapper.m_AirborneVehicles_RotateClockwise;
        public InputAction @RotateAntiClockwise => m_Wrapper.m_AirborneVehicles_RotateAntiClockwise;
        public InputAction @Up => m_Wrapper.m_AirborneVehicles_Up;
        public InputAction @Down => m_Wrapper.m_AirborneVehicles_Down;
        public InputAction @Movement => m_Wrapper.m_AirborneVehicles_Movement;
        public InputActionMap Get() { return m_Wrapper.m_AirborneVehicles; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AirborneVehiclesActions set) { return set.Get(); }
        public void AddCallbacks(IAirborneVehiclesActions instance)
        {
            if (instance == null || m_Wrapper.m_AirborneVehiclesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AirborneVehiclesActionsCallbackInterfaces.Add(instance);
            @RotateClockwise.started += instance.OnRotateClockwise;
            @RotateClockwise.performed += instance.OnRotateClockwise;
            @RotateClockwise.canceled += instance.OnRotateClockwise;
            @RotateAntiClockwise.started += instance.OnRotateAntiClockwise;
            @RotateAntiClockwise.performed += instance.OnRotateAntiClockwise;
            @RotateAntiClockwise.canceled += instance.OnRotateAntiClockwise;
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IAirborneVehiclesActions instance)
        {
            @RotateClockwise.started -= instance.OnRotateClockwise;
            @RotateClockwise.performed -= instance.OnRotateClockwise;
            @RotateClockwise.canceled -= instance.OnRotateClockwise;
            @RotateAntiClockwise.started -= instance.OnRotateAntiClockwise;
            @RotateAntiClockwise.performed -= instance.OnRotateAntiClockwise;
            @RotateAntiClockwise.canceled -= instance.OnRotateAntiClockwise;
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IAirborneVehiclesActions instance)
        {
            if (m_Wrapper.m_AirborneVehiclesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAirborneVehiclesActions instance)
        {
            foreach (var item in m_Wrapper.m_AirborneVehiclesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AirborneVehiclesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AirborneVehiclesActions @AirborneVehicles => new AirborneVehiclesActions(this);
    public interface IPlayerActions
    {
        void OnMoveGhost(InputAction.CallbackContext context);
        void OnFloatUp(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnPosses(InputAction.CallbackContext context);
        void OnFloatDown(InputAction.CallbackContext context);
        void OnShooting(InputAction.CallbackContext context);
        void OnAiming(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IVehicleActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRaiseLower(InputAction.CallbackContext context);
        void OnPickDrop(InputAction.CallbackContext context);
        void OnRotateClockwise(InputAction.CallbackContext context);
        void OnRotateAntiClockwise(InputAction.CallbackContext context);
    }
    public interface IAirborneVehiclesActions
    {
        void OnRotateClockwise(InputAction.CallbackContext context);
        void OnRotateAntiClockwise(InputAction.CallbackContext context);
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
    }
}
